/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BodySocialLoginV1SocialLoginProviderPost
 */
export interface BodySocialLoginV1SocialLoginProviderPost {
    /**
     * 
     * @type {string}
     * @memberof BodySocialLoginV1SocialLoginProviderPost
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface BodyUpdateUserV1UsersUserIdPost
 */
export interface BodyUpdateUserV1UsersUserIdPost {
    /**
     * 
     * @type {UserInput}
     * @memberof BodyUpdateUserV1UsersUserIdPost
     */
    'user_input': UserInput;
}
/**
 * 
 * @export
 * @interface CalendarInput
 */
export interface CalendarInput {
    /**
     * 일정 이름
     * @type {string}
     * @memberof CalendarInput
     */
    'name': string;
    /**
     * 일정 시작일시
     * @type {string}
     * @memberof CalendarInput
     */
    'start_dt': string;
    /**
     * 
     * @type {string}
     * @memberof CalendarInput
     */
    'end_dt'?: string | null;
    /**
     * 하루종일 여부
     * @type {boolean}
     * @memberof CalendarInput
     */
    'is_all_day'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CalendarInput
     */
    'remind_interval'?: number | null;
    /**
     * 중요여부
     * @type {boolean}
     * @memberof CalendarInput
     */
    'is_important'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CalendarInput
     */
    'content'?: string | null;
    /**
     * 일정 완료여부
     * @type {boolean}
     * @memberof CalendarInput
     */
    'is_complete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CalendarInput
     */
    'completed_at'?: string | null;
    /**
     * 반복여부
     * @type {boolean}
     * @memberof CalendarInput
     */
    'is_repeat'?: boolean;
    /**
     * 태그 배열
     * @type {}
     * @memberof CalendarInput
     */
    'tags'?:  | null;
}
/**
 * 
 * @export
 * @interface CalendarOutput
 */
export interface CalendarOutput {
    /**
     * 일정 아이디
     * @type {string}
     * @memberof CalendarOutput
     */
    'id': string;
    /**
     * 일정 이름
     * @type {string}
     * @memberof CalendarOutput
     */
    'name': string;
    /**
     * 일정 시작일시
     * @type {string}
     * @memberof CalendarOutput
     */
    'start_dt': string;
    /**
     * 
     * @type {string}
     * @memberof CalendarOutput
     */
    'end_dt': string | null;
    /**
     * 하루종일 여부
     * @type {boolean}
     * @memberof CalendarOutput
     */
    'is_all_day': boolean;
    /**
     * 
     * @type {number}
     * @memberof CalendarOutput
     */
    'remind_interval': number | null;
    /**
     * 중요여부
     * @type {boolean}
     * @memberof CalendarOutput
     */
    'is_important': boolean;
    /**
     * 
     * @type {string}
     * @memberof CalendarOutput
     */
    'content': string | null;
    /**
     * 일정 완료여부
     * @type {boolean}
     * @memberof CalendarOutput
     */
    'is_complete': boolean;
    /**
     * 
     * @type {string}
     * @memberof CalendarOutput
     */
    'completed_at': string | null;
    /**
     * 반복여부
     * @type {boolean}
     * @memberof CalendarOutput
     */
    'is_repeat': boolean;
    /**
     * 태그 배열
     * @type {}
     * @memberof CalendarOutput
     */
    'tags':  | null;
    /**
     * 
     * @type {string}
     * @memberof CalendarOutput
     */
    'calendar_recurring_id': string | null;
    /**
     * 
     * @type {string}
     * @memberof CalendarOutput
     */
    'contact_id': string | null;
}
/**
 * 
 * @export
 * @interface ContactInput
 */
export interface ContactInput {
    /**
     * 연락처 이름
     * @type {string}
     * @memberof ContactInput
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ContactInput
     */
    'organization'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactInput
     */
    'position'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactInput
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactInput
     */
    'email'?: string | null;
    /**
     * 카테고리
     * @type {string}
     * @memberof ContactInput
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof ContactInput
     */
    'profile_image_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactInput
     */
    'content'?: string | null;
    /**
     * 중요여부
     * @type {boolean}
     * @memberof ContactInput
     */
    'is_important'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ContactInput
     */
    'repeat_interval'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactInput
     */
    'repeat_base_date'?: string | null;
}
/**
 * 
 * @export
 * @interface ContactOutput
 */
export interface ContactOutput {
    /**
     * 연락처 아이디
     * @type {string}
     * @memberof ContactOutput
     */
    'id': string;
    /**
     * 연락처 이름
     * @type {string}
     * @memberof ContactOutput
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ContactOutput
     */
    'organization': string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactOutput
     */
    'position': string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactOutput
     */
    'phone': string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactOutput
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactOutput
     */
    'category': string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactOutput
     */
    'profile_image_url': string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactOutput
     */
    'content': string | null;
    /**
     * 중요여부
     * @type {boolean}
     * @memberof ContactOutput
     */
    'is_important': boolean;
    /**
     * 
     * @type {string}
     * @memberof ContactOutput
     */
    'repeat_interval': string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactOutput
     */
    'repeat_base_date': string | null;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface UserInput
 */
export interface UserInput {
    /**
     * 
     * @type {string}
     * @memberof UserInput
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInput
     */
    'email'?: string | null;
}
/**
 * 
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * 유저 아이디
     * @type {number}
     * @memberof UserProfile
     */
    'id': number;
    /**
     * 이름
     * @type {string}
     * @memberof UserProfile
     */
    'name': string;
    /**
     * 이메일
     * @type {string}
     * @memberof UserProfile
     */
    'email': string;
    /**
     * 생성일시
     * @type {string}
     * @memberof UserProfile
     */
    'created_at': string;
    /**
     * 변경일시
     * @type {string}
     * @memberof UserProfile
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * CalendarApi - axios parameter creator
 * @export
 */
export const CalendarApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 캘린더를 생성합니다.
         * @summary Create Calendar
         * @param {string} contactId 
         * @param {CalendarInput} calendarInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCalendarV1ContactsContactIdCalendarsPost: async (contactId: string, calendarInput: CalendarInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('createCalendarV1ContactsContactIdCalendarsPost', 'contactId', contactId)
            // verify required parameter 'calendarInput' is not null or undefined
            assertParamExists('createCalendarV1ContactsContactIdCalendarsPost', 'calendarInput', calendarInput)
            const localVarPath = `/v1/contacts/{contact_id}/calendars`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(calendarInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 캘린더를 삭제합니다.
         * @summary Delete Calendar
         * @param {string} contactId 
         * @param {string} calendarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCalendarV1ContactsContactIdCalendarsCalendarIdDelete: async (contactId: string, calendarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('deleteCalendarV1ContactsContactIdCalendarsCalendarIdDelete', 'contactId', contactId)
            // verify required parameter 'calendarId' is not null or undefined
            assertParamExists('deleteCalendarV1ContactsContactIdCalendarsCalendarIdDelete', 'calendarId', calendarId)
            const localVarPath = `/v1/contacts/{contact_id}/calendars/{calendar_id}`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId)))
                .replace(`{${"calendar_id"}}`, encodeURIComponent(String(calendarId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 복수 캘린더를 조회합니다.
         * @summary Fetch Calendar
         * @param {string} contactId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCalendarV1ContactsContactIdCalendarsGet: async (contactId: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('fetchCalendarV1ContactsContactIdCalendarsGet', 'contactId', contactId)
            const localVarPath = `/v1/contacts/{contact_id}/calendars`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 유저의 모든 캘린더를 가져옵니다.
         * @summary Fetch User Calendars
         * @param {number} userId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCalendarsV1UsersUserIdCalendarsGet: async (userId: number, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('fetchUserCalendarsV1UsersUserIdCalendarsGet', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}/calendars`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 캘린더를 조회합니다.
         * @summary Get Calendar
         * @param {string} contactId 
         * @param {string} calendarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCalendarV1ContactsContactIdCalendarsCalendarIdGet: async (contactId: string, calendarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('getCalendarV1ContactsContactIdCalendarsCalendarIdGet', 'contactId', contactId)
            // verify required parameter 'calendarId' is not null or undefined
            assertParamExists('getCalendarV1ContactsContactIdCalendarsCalendarIdGet', 'calendarId', calendarId)
            const localVarPath = `/v1/contacts/{contact_id}/calendars/{calendar_id}`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId)))
                .replace(`{${"calendar_id"}}`, encodeURIComponent(String(calendarId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 캘린더를 수정합니다.
         * @summary Update Calendar
         * @param {string} contactId 
         * @param {string} calendarId 
         * @param {CalendarInput} calendarInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCalendarV1ContactsContactIdCalendarsCalendarIdPost: async (contactId: string, calendarId: string, calendarInput: CalendarInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('updateCalendarV1ContactsContactIdCalendarsCalendarIdPost', 'contactId', contactId)
            // verify required parameter 'calendarId' is not null or undefined
            assertParamExists('updateCalendarV1ContactsContactIdCalendarsCalendarIdPost', 'calendarId', calendarId)
            // verify required parameter 'calendarInput' is not null or undefined
            assertParamExists('updateCalendarV1ContactsContactIdCalendarsCalendarIdPost', 'calendarInput', calendarInput)
            const localVarPath = `/v1/contacts/{contact_id}/calendars/{calendar_id}`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId)))
                .replace(`{${"calendar_id"}}`, encodeURIComponent(String(calendarId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(calendarInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CalendarApi - functional programming interface
 * @export
 */
export const CalendarApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CalendarApiAxiosParamCreator(configuration)
    return {
        /**
         * 캘린더를 생성합니다.
         * @summary Create Calendar
         * @param {string} contactId 
         * @param {CalendarInput} calendarInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCalendarV1ContactsContactIdCalendarsPost(contactId: string, calendarInput: CalendarInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalendarOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCalendarV1ContactsContactIdCalendarsPost(contactId, calendarInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 캘린더를 삭제합니다.
         * @summary Delete Calendar
         * @param {string} contactId 
         * @param {string} calendarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCalendarV1ContactsContactIdCalendarsCalendarIdDelete(contactId: string, calendarId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCalendarV1ContactsContactIdCalendarsCalendarIdDelete(contactId, calendarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 복수 캘린더를 조회합니다.
         * @summary Fetch Calendar
         * @param {string} contactId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCalendarV1ContactsContactIdCalendarsGet(contactId: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CalendarOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCalendarV1ContactsContactIdCalendarsGet(contactId, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 유저의 모든 캘린더를 가져옵니다.
         * @summary Fetch User Calendars
         * @param {number} userId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserCalendarsV1UsersUserIdCalendarsGet(userId: number, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CalendarOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserCalendarsV1UsersUserIdCalendarsGet(userId, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 캘린더를 조회합니다.
         * @summary Get Calendar
         * @param {string} contactId 
         * @param {string} calendarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCalendarV1ContactsContactIdCalendarsCalendarIdGet(contactId: string, calendarId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCalendarV1ContactsContactIdCalendarsCalendarIdGet(contactId, calendarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 캘린더를 수정합니다.
         * @summary Update Calendar
         * @param {string} contactId 
         * @param {string} calendarId 
         * @param {CalendarInput} calendarInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCalendarV1ContactsContactIdCalendarsCalendarIdPost(contactId: string, calendarId: string, calendarInput: CalendarInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalendarOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCalendarV1ContactsContactIdCalendarsCalendarIdPost(contactId, calendarId, calendarInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CalendarApi - factory interface
 * @export
 */
export const CalendarApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CalendarApiFp(configuration)
    return {
        /**
         * 캘린더를 생성합니다.
         * @summary Create Calendar
         * @param {string} contactId 
         * @param {CalendarInput} calendarInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCalendarV1ContactsContactIdCalendarsPost(contactId: string, calendarInput: CalendarInput, options?: any): AxiosPromise<CalendarOutput> {
            return localVarFp.createCalendarV1ContactsContactIdCalendarsPost(contactId, calendarInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 캘린더를 삭제합니다.
         * @summary Delete Calendar
         * @param {string} contactId 
         * @param {string} calendarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCalendarV1ContactsContactIdCalendarsCalendarIdDelete(contactId: string, calendarId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCalendarV1ContactsContactIdCalendarsCalendarIdDelete(contactId, calendarId, options).then((request) => request(axios, basePath));
        },
        /**
         * 복수 캘린더를 조회합니다.
         * @summary Fetch Calendar
         * @param {string} contactId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCalendarV1ContactsContactIdCalendarsGet(contactId: string, offset?: number, limit?: number, options?: any): AxiosPromise<Array<CalendarOutput>> {
            return localVarFp.fetchCalendarV1ContactsContactIdCalendarsGet(contactId, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 유저의 모든 캘린더를 가져옵니다.
         * @summary Fetch User Calendars
         * @param {number} userId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCalendarsV1UsersUserIdCalendarsGet(userId: number, offset?: number, limit?: number, options?: any): AxiosPromise<Array<CalendarOutput>> {
            return localVarFp.fetchUserCalendarsV1UsersUserIdCalendarsGet(userId, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 캘린더를 조회합니다.
         * @summary Get Calendar
         * @param {string} contactId 
         * @param {string} calendarId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCalendarV1ContactsContactIdCalendarsCalendarIdGet(contactId: string, calendarId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getCalendarV1ContactsContactIdCalendarsCalendarIdGet(contactId, calendarId, options).then((request) => request(axios, basePath));
        },
        /**
         * 캘린더를 수정합니다.
         * @summary Update Calendar
         * @param {string} contactId 
         * @param {string} calendarId 
         * @param {CalendarInput} calendarInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCalendarV1ContactsContactIdCalendarsCalendarIdPost(contactId: string, calendarId: string, calendarInput: CalendarInput, options?: any): AxiosPromise<CalendarOutput> {
            return localVarFp.updateCalendarV1ContactsContactIdCalendarsCalendarIdPost(contactId, calendarId, calendarInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CalendarApi - object-oriented interface
 * @export
 * @class CalendarApi
 * @extends {BaseAPI}
 */
export class CalendarApi extends BaseAPI {
    /**
     * 캘린더를 생성합니다.
     * @summary Create Calendar
     * @param {string} contactId 
     * @param {CalendarInput} calendarInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarApi
     */
    public createCalendarV1ContactsContactIdCalendarsPost(contactId: string, calendarInput: CalendarInput, options?: AxiosRequestConfig) {
        return CalendarApiFp(this.configuration).createCalendarV1ContactsContactIdCalendarsPost(contactId, calendarInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 캘린더를 삭제합니다.
     * @summary Delete Calendar
     * @param {string} contactId 
     * @param {string} calendarId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarApi
     */
    public deleteCalendarV1ContactsContactIdCalendarsCalendarIdDelete(contactId: string, calendarId: string, options?: AxiosRequestConfig) {
        return CalendarApiFp(this.configuration).deleteCalendarV1ContactsContactIdCalendarsCalendarIdDelete(contactId, calendarId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 복수 캘린더를 조회합니다.
     * @summary Fetch Calendar
     * @param {string} contactId 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarApi
     */
    public fetchCalendarV1ContactsContactIdCalendarsGet(contactId: string, offset?: number, limit?: number, options?: AxiosRequestConfig) {
        return CalendarApiFp(this.configuration).fetchCalendarV1ContactsContactIdCalendarsGet(contactId, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 유저의 모든 캘린더를 가져옵니다.
     * @summary Fetch User Calendars
     * @param {number} userId 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarApi
     */
    public fetchUserCalendarsV1UsersUserIdCalendarsGet(userId: number, offset?: number, limit?: number, options?: AxiosRequestConfig) {
        return CalendarApiFp(this.configuration).fetchUserCalendarsV1UsersUserIdCalendarsGet(userId, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 캘린더를 조회합니다.
     * @summary Get Calendar
     * @param {string} contactId 
     * @param {string} calendarId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarApi
     */
    public getCalendarV1ContactsContactIdCalendarsCalendarIdGet(contactId: string, calendarId: string, options?: AxiosRequestConfig) {
        return CalendarApiFp(this.configuration).getCalendarV1ContactsContactIdCalendarsCalendarIdGet(contactId, calendarId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 캘린더를 수정합니다.
     * @summary Update Calendar
     * @param {string} contactId 
     * @param {string} calendarId 
     * @param {CalendarInput} calendarInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarApi
     */
    public updateCalendarV1ContactsContactIdCalendarsCalendarIdPost(contactId: string, calendarId: string, calendarInput: CalendarInput, options?: AxiosRequestConfig) {
        return CalendarApiFp(this.configuration).updateCalendarV1ContactsContactIdCalendarsCalendarIdPost(contactId, calendarId, calendarInput, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContactApi - axios parameter creator
 * @export
 */
export const ContactApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Contact
         * @param {ContactInput} contactInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContactV1ContactsPost: async (contactInput: ContactInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactInput' is not null or undefined
            assertParamExists('createContactV1ContactsPost', 'contactInput', contactInput)
            const localVarPath = `/v1/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Contact
         * @param {string} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContactV1ContactsContactIdDelete: async (contactId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('deleteContactV1ContactsContactIdDelete', 'contactId', contactId)
            const localVarPath = `/v1/contacts/{contact_id}`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 복수 연락처를 조회합니다.
         * @summary Fetch Contact
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchContactV1ContactsGet: async (offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 연락처를 조회합니다.
         * @summary Get Contact
         * @param {string} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactV1ContactsContactIdGet: async (contactId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('getContactV1ContactsContactIdGet', 'contactId', contactId)
            const localVarPath = `/v1/contacts/{contact_id}`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Contact
         * @param {string} contactId 
         * @param {ContactInput} contactInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContactV1ContactsContactIdPost: async (contactId: string, contactInput: ContactInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('updateContactV1ContactsContactIdPost', 'contactId', contactId)
            // verify required parameter 'contactInput' is not null or undefined
            assertParamExists('updateContactV1ContactsContactIdPost', 'contactInput', contactInput)
            const localVarPath = `/v1/contacts/{contact_id}`
                .replace(`{${"contact_id"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactApi - functional programming interface
 * @export
 */
export const ContactApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Contact
         * @param {ContactInput} contactInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContactV1ContactsPost(contactInput: ContactInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContactV1ContactsPost(contactInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Contact
         * @param {string} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContactV1ContactsContactIdDelete(contactId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContactV1ContactsContactIdDelete(contactId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 복수 연락처를 조회합니다.
         * @summary Fetch Contact
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchContactV1ContactsGet(offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContactOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchContactV1ContactsGet(offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 연락처를 조회합니다.
         * @summary Get Contact
         * @param {string} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactV1ContactsContactIdGet(contactId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContactV1ContactsContactIdGet(contactId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Contact
         * @param {string} contactId 
         * @param {ContactInput} contactInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContactV1ContactsContactIdPost(contactId: string, contactInput: ContactInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContactV1ContactsContactIdPost(contactId, contactInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContactApi - factory interface
 * @export
 */
export const ContactApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Contact
         * @param {ContactInput} contactInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContactV1ContactsPost(contactInput: ContactInput, options?: any): AxiosPromise<ContactOutput> {
            return localVarFp.createContactV1ContactsPost(contactInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Contact
         * @param {string} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContactV1ContactsContactIdDelete(contactId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteContactV1ContactsContactIdDelete(contactId, options).then((request) => request(axios, basePath));
        },
        /**
         * 복수 연락처를 조회합니다.
         * @summary Fetch Contact
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchContactV1ContactsGet(offset?: number, limit?: number, options?: any): AxiosPromise<Array<ContactOutput>> {
            return localVarFp.fetchContactV1ContactsGet(offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 연락처를 조회합니다.
         * @summary Get Contact
         * @param {string} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactV1ContactsContactIdGet(contactId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getContactV1ContactsContactIdGet(contactId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Contact
         * @param {string} contactId 
         * @param {ContactInput} contactInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContactV1ContactsContactIdPost(contactId: string, contactInput: ContactInput, options?: any): AxiosPromise<ContactOutput> {
            return localVarFp.updateContactV1ContactsContactIdPost(contactId, contactInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactApi - object-oriented interface
 * @export
 * @class ContactApi
 * @extends {BaseAPI}
 */
export class ContactApi extends BaseAPI {
    /**
     * 
     * @summary Create Contact
     * @param {ContactInput} contactInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public createContactV1ContactsPost(contactInput: ContactInput, options?: AxiosRequestConfig) {
        return ContactApiFp(this.configuration).createContactV1ContactsPost(contactInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Contact
     * @param {string} contactId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public deleteContactV1ContactsContactIdDelete(contactId: string, options?: AxiosRequestConfig) {
        return ContactApiFp(this.configuration).deleteContactV1ContactsContactIdDelete(contactId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 복수 연락처를 조회합니다.
     * @summary Fetch Contact
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public fetchContactV1ContactsGet(offset?: number, limit?: number, options?: AxiosRequestConfig) {
        return ContactApiFp(this.configuration).fetchContactV1ContactsGet(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 연락처를 조회합니다.
     * @summary Get Contact
     * @param {string} contactId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public getContactV1ContactsContactIdGet(contactId: string, options?: AxiosRequestConfig) {
        return ContactApiFp(this.configuration).getContactV1ContactsContactIdGet(contactId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Contact
     * @param {string} contactId 
     * @param {ContactInput} contactInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public updateContactV1ContactsContactIdPost(contactId: string, contactInput: ContactInput, options?: AxiosRequestConfig) {
        return ContactApiFp(this.configuration).updateContactV1ContactsContactIdPost(contactId, contactInput, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingGet(options?: any): AxiosPromise<string> {
            return localVarFp.pingGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Ping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pingGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pingGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 내 정보를 삭제합니다.(회원 탈퇴)
         * @summary Delete User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserV1UsersUserIdDelete: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUserV1UsersUserIdDelete', 'userId', userId)
            const localVarPath = `/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 복수 유저를 조회합니다.
         * @summary Fetch Users
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsersV1UsersGet: async (offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 내 정보를 조회합니다. (로그인 필요 후 활성화 예정)
         * @summary Get Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeV1UsersMeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 소셜 로그인을 합니다.
         * @summary Social Login
         * @param {SocialLoginV1SocialLoginProviderPostProviderEnum} provider 
         * @param {BodySocialLoginV1SocialLoginProviderPost} bodySocialLoginV1SocialLoginProviderPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialLoginV1SocialLoginProviderPost: async (provider: SocialLoginV1SocialLoginProviderPostProviderEnum, bodySocialLoginV1SocialLoginProviderPost: BodySocialLoginV1SocialLoginProviderPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('socialLoginV1SocialLoginProviderPost', 'provider', provider)
            // verify required parameter 'bodySocialLoginV1SocialLoginProviderPost' is not null or undefined
            assertParamExists('socialLoginV1SocialLoginProviderPost', 'bodySocialLoginV1SocialLoginProviderPost', bodySocialLoginV1SocialLoginProviderPost)
            const localVarPath = `/v1/social-login/{provider}`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodySocialLoginV1SocialLoginProviderPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 내 정보를 수정합니다.
         * @summary Update User
         * @param {number} userId 
         * @param {BodyUpdateUserV1UsersUserIdPost} bodyUpdateUserV1UsersUserIdPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserV1UsersUserIdPost: async (userId: number, bodyUpdateUserV1UsersUserIdPost: BodyUpdateUserV1UsersUserIdPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserV1UsersUserIdPost', 'userId', userId)
            // verify required parameter 'bodyUpdateUserV1UsersUserIdPost' is not null or undefined
            assertParamExists('updateUserV1UsersUserIdPost', 'bodyUpdateUserV1UsersUserIdPost', bodyUpdateUserV1UsersUserIdPost)
            const localVarPath = `/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyUpdateUserV1UsersUserIdPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 내 정보를 삭제합니다.(회원 탈퇴)
         * @summary Delete User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserV1UsersUserIdDelete(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserV1UsersUserIdDelete(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 복수 유저를 조회합니다.
         * @summary Fetch Users
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUsersV1UsersGet(offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserProfile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUsersV1UsersGet(offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 내 정보를 조회합니다. (로그인 필요 후 활성화 예정)
         * @summary Get Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeV1UsersMeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeV1UsersMeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 소셜 로그인을 합니다.
         * @summary Social Login
         * @param {SocialLoginV1SocialLoginProviderPostProviderEnum} provider 
         * @param {BodySocialLoginV1SocialLoginProviderPost} bodySocialLoginV1SocialLoginProviderPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async socialLoginV1SocialLoginProviderPost(provider: SocialLoginV1SocialLoginProviderPostProviderEnum, bodySocialLoginV1SocialLoginProviderPost: BodySocialLoginV1SocialLoginProviderPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.socialLoginV1SocialLoginProviderPost(provider, bodySocialLoginV1SocialLoginProviderPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 내 정보를 수정합니다.
         * @summary Update User
         * @param {number} userId 
         * @param {BodyUpdateUserV1UsersUserIdPost} bodyUpdateUserV1UsersUserIdPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserV1UsersUserIdPost(userId: number, bodyUpdateUserV1UsersUserIdPost: BodyUpdateUserV1UsersUserIdPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserV1UsersUserIdPost(userId, bodyUpdateUserV1UsersUserIdPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 내 정보를 삭제합니다.(회원 탈퇴)
         * @summary Delete User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserV1UsersUserIdDelete(userId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserV1UsersUserIdDelete(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 복수 유저를 조회합니다.
         * @summary Fetch Users
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsersV1UsersGet(offset?: number, limit?: number, options?: any): AxiosPromise<Array<UserProfile>> {
            return localVarFp.fetchUsersV1UsersGet(offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 내 정보를 조회합니다. (로그인 필요 후 활성화 예정)
         * @summary Get Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeV1UsersMeGet(options?: any): AxiosPromise<void> {
            return localVarFp.getMeV1UsersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 소셜 로그인을 합니다.
         * @summary Social Login
         * @param {SocialLoginV1SocialLoginProviderPostProviderEnum} provider 
         * @param {BodySocialLoginV1SocialLoginProviderPost} bodySocialLoginV1SocialLoginProviderPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialLoginV1SocialLoginProviderPost(provider: SocialLoginV1SocialLoginProviderPostProviderEnum, bodySocialLoginV1SocialLoginProviderPost: BodySocialLoginV1SocialLoginProviderPost, options?: any): AxiosPromise<UserProfile> {
            return localVarFp.socialLoginV1SocialLoginProviderPost(provider, bodySocialLoginV1SocialLoginProviderPost, options).then((request) => request(axios, basePath));
        },
        /**
         * 내 정보를 수정합니다.
         * @summary Update User
         * @param {number} userId 
         * @param {BodyUpdateUserV1UsersUserIdPost} bodyUpdateUserV1UsersUserIdPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserV1UsersUserIdPost(userId: number, bodyUpdateUserV1UsersUserIdPost: BodyUpdateUserV1UsersUserIdPost, options?: any): AxiosPromise<UserProfile> {
            return localVarFp.updateUserV1UsersUserIdPost(userId, bodyUpdateUserV1UsersUserIdPost, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 내 정보를 삭제합니다.(회원 탈퇴)
     * @summary Delete User
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUserV1UsersUserIdDelete(userId: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).deleteUserV1UsersUserIdDelete(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 복수 유저를 조회합니다.
     * @summary Fetch Users
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public fetchUsersV1UsersGet(offset?: number, limit?: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).fetchUsersV1UsersGet(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 내 정보를 조회합니다. (로그인 필요 후 활성화 예정)
     * @summary Get Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getMeV1UsersMeGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getMeV1UsersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 소셜 로그인을 합니다.
     * @summary Social Login
     * @param {SocialLoginV1SocialLoginProviderPostProviderEnum} provider 
     * @param {BodySocialLoginV1SocialLoginProviderPost} bodySocialLoginV1SocialLoginProviderPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public socialLoginV1SocialLoginProviderPost(provider: SocialLoginV1SocialLoginProviderPostProviderEnum, bodySocialLoginV1SocialLoginProviderPost: BodySocialLoginV1SocialLoginProviderPost, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).socialLoginV1SocialLoginProviderPost(provider, bodySocialLoginV1SocialLoginProviderPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 내 정보를 수정합니다.
     * @summary Update User
     * @param {number} userId 
     * @param {BodyUpdateUserV1UsersUserIdPost} bodyUpdateUserV1UsersUserIdPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserV1UsersUserIdPost(userId: number, bodyUpdateUserV1UsersUserIdPost: BodyUpdateUserV1UsersUserIdPost, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUserV1UsersUserIdPost(userId, bodyUpdateUserV1UsersUserIdPost, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SocialLoginV1SocialLoginProviderPostProviderEnum = {
    Kakao: 'kakao',
    Apple: 'apple'
} as const;
export type SocialLoginV1SocialLoginProviderPostProviderEnum = typeof SocialLoginV1SocialLoginProviderPostProviderEnum[keyof typeof SocialLoginV1SocialLoginProviderPostProviderEnum];


